openapi: 3.0.3
info:
  title: BAMBU CRM API
  version: 1.0.0
  description: API para el sistema de CRM de distribución de productos químicos BAMBU
  contact:
    name: Equipo BAMBU
    url: https://bambu.local
servers:
  - url: http://localhost:8000/api/v1
    description: Servidor de desarrollo
  - url: https://api.bambu.local/v1
    description: Servidor de producción

paths:
  /auth/login:
    post:
      summary: Iniciar sesión
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: admin@bambu.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9..."
                  expires_at:
                    type: string
                    format: date-time
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      summary: Cerrar sesión
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /productos:
    get:
      summary: Listar productos
      tags: [Productos]
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Search'
        - in: query
          name: marca
          schema:
            type: string
          description: Filtrar por marca
        - in: query
          name: en_stock
          schema:
            type: boolean
          description: Solo productos con stock
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Producto'

  /stock:
    get:
      summary: Lista de stock de productos
      tags: [Stock]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Search'
        - in: query
          name: stock_bajo
          schema:
            type: boolean
          description: Solo productos con stock bajo
        - in: query
          name: sin_stock
          schema:
            type: boolean
          description: Solo productos sin stock
      responses:
        '200':
          description: Lista de stock
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductoStock'

  /stock/ajustar:
    post:
      summary: Ajustar stock de producto
      tags: [Stock]
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema:
            type: string
            format: uuid
          description: Clave de idempotencia para evitar duplicados
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockAjustarRequest'
      responses:
        '200':
          description: Stock ajustado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockAjustarResponse'
        '400':
          description: Header Idempotency-Key requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /stock/ingreso:
    post:
      summary: Registrar ingreso de stock
      tags: [Stock]
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockIngresoRequest'
      responses:
        '200':
          description: Ingreso registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockIngresoResponse'

  /repartos:
    get:
      summary: Lista de repartos
      tags: [Repartos]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - in: query
          name: fecha
          schema:
            type: string
            format: date
        - in: query
          name: estado
          schema:
            type: string
            enum: [programado, en_ruta, entregado, fallido]
      responses:
        '200':
          description: Lista de repartos
          content:
            application/json:
              schema:
                type: object
                properties:
                  repartos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reparto'

    post:
      summary: Programar nuevo reparto
      tags: [Repartos]
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepartoRequest'
      responses:
        '201':
          description: Reparto programado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepartoResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Número de página
    
    PerPage:
      in: query
      name: per_page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: Elementos por página
    
    Search:
      in: query
      name: search
      schema:
        type: string
      description: Término de búsqueda

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan@bambu.com"
        created_at:
          type: string
          format: date-time

    Producto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Ácido Sulfúrico 98%"
        sku:
          type: string
          example: "AS-98-001"
        descripcion:
          type: string
          nullable: true
        marca_producto:
          type: string
          example: "ChemCorp"
        precio_base_l1:
          type: number
          format: decimal
          example: 45.50
        unidad_medida:
          type: string
          enum: [BIDON_5L, IBC_1000L]
          example: "BIDON_5L"
        peligrosidad:
          type: string
          enum: [none, corrosive, flammable, toxic, reactive]
          example: "corrosive"

    ProductoStock:
      allOf:
        - $ref: '#/components/schemas/Producto'
        - type: object
          properties:
            stock_actual:
              type: integer
              example: 25
            stock_minimo:
              type: integer
              example: 10
            estado_stock:
              type: string
              enum: [disponible, stock_bajo, sin_stock]
              example: "disponible"
            fabricar_siguiente:
              type: boolean
              example: false

    StockAjustarRequest:
      type: object
      required: [producto_id, nueva_cantidad, motivo]
      properties:
        producto_id:
          type: integer
          example: 1
        nueva_cantidad:
          type: integer
          minimum: 0
          example: 30
        motivo:
          type: string
          minLength: 5
          maxLength: 500
          example: "Reconteo físico - diferencia encontrada"
        lote_produccion:
          type: string
          nullable: true
          maxLength: 100
          example: "LT-2025-001"

    StockAjustarResponse:
      type: object
      properties:
        message:
          type: string
          example: "Stock ajustado correctamente"
        movimiento:
          $ref: '#/components/schemas/StockMovimiento'
        producto:
          $ref: '#/components/schemas/ProductoStockInfo'

    StockIngresoRequest:
      type: object
      required: [producto_id, cantidad]
      properties:
        producto_id:
          type: integer
          example: 1
        cantidad:
          type: integer
          minimum: 1
          maximum: 10000
          example: 50
        motivo:
          type: string
          nullable: true
          maxLength: 500
          example: "Ingreso de producción"
        lote_produccion:
          type: string
          nullable: true
          maxLength: 100
          example: "LT-2025-001"

    StockIngresoResponse:
      type: object
      properties:
        message:
          type: string
          example: "Stock incrementado correctamente"
        movimiento:
          $ref: '#/components/schemas/StockMovimiento'
        producto:
          $ref: '#/components/schemas/ProductoStockInfo'

    StockMovimiento:
      type: object
      properties:
        id:
          type: integer
          example: 123
        tipo:
          type: string
          enum: [produccion, ajuste_positivo, ajuste_negativo, venta]
          example: "ajuste_positivo"
        cantidad:
          type: integer
          example: 5
        stock_anterior:
          type: integer
          example: 25
        stock_nuevo:
          type: integer
          example: 30
        motivo:
          type: string
          example: "Reconteo físico"
        lote_produccion:
          type: string
          nullable: true
          example: "LT-2025-001"
        created_at:
          type: string
          format: date-time

    ProductoStockInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Ácido Sulfúrico 98%"
        stock_anterior:
          type: integer
          example: 25
        stock_actual:
          type: integer
          example: 30
        estado_stock:
          type: string
          enum: [disponible, stock_bajo, sin_stock]
          example: "disponible"

    Reparto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        pedido_id:
          type: integer
          example: 5
        vehiculo_id:
          type: integer
          example: 3
        fecha_programada:
          type: string
          format: date
          example: "2025-08-10"
        hora_salida:
          type: string
          format: time
          nullable: true
          example: "08:30"
        hora_entrega:
          type: string
          format: time
          nullable: true
          example: "10:45"
        estado:
          type: string
          enum: [programado, en_ruta, entregado, fallido]
          example: "programado"
        km_recorridos:
          type: number
          format: decimal
          nullable: true
          example: 25.5
        observaciones:
          type: string
          nullable: true
          example: "Cliente prefiere entrega por la mañana"

    RepartoRequest:
      type: object
      required: [pedido_id, vehiculo_id, fecha_programada]
      properties:
        pedido_id:
          type: integer
          example: 5
        vehiculo_id:
          type: integer
          example: 3
        fecha_programada:
          type: string
          format: date
          example: "2025-08-10"
        hora_salida:
          type: string
          format: time
          nullable: true
          example: "08:30"
        observaciones:
          type: string
          nullable: true
          example: "Cliente prefiere entrega por la mañana"

    RepartoResponse:
      type: object
      properties:
        message:
          type: string
          example: "Reparto programado exitosamente"
        reparto:
          $ref: '#/components/schemas/Reparto'

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        meta:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            from:
              type: integer
              example: 1
            to:
              type: integer
              example: 25
            last_page:
              type: integer
              example: 5
            per_page:
              type: integer
              example: 25
            total:
              type: integer
              example: 123
            path:
              type: string
              example: "http://localhost:8000/api/v1/stock"
            next_page_url:
              type: string
              nullable: true
              example: "http://localhost:8000/api/v1/stock?page=2"
            prev_page_url:
              type: string
              nullable: true
              example: null
        links:
          type: object
          properties:
            first:
              type: string
              example: "http://localhost:8000/api/v1/stock?page=1"
            last:
              type: string
              example: "http://localhost:8000/api/v1/stock?page=5"
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: "http://localhost:8000/api/v1/stock?page=2"

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Los datos proporcionados no son válidos"
            details:
              type: object
              example: {}
            requestId:
              type: string
              example: "550e8400-e29b-41d4-a716-446655440000"

  responses:
    ValidationError:
      description: Error de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Los datos proporcionados no son válidos"
              details:
                email: ["El campo email es obligatorio"]
              requestId: "550e8400-e29b-41d4-a716-446655440000"

    UnauthorizedError:
      description: Error de autenticación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Credenciales inválidas"
              details: {}
              requestId: "550e8400-e29b-41d4-a716-446655440000"

    NotFoundError:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "RESOURCE_NOT_FOUND"
              message: "Recurso no encontrado"
              details: {}
              requestId: "550e8400-e29b-41d4-a716-446655440000"

    TooManyRequestsError:
      description: Demasiadas solicitudes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "TOO_MANY_REQUESTS"
              message: "Demasiadas solicitudes"
              details: {}
              requestId: "550e8400-e29b-41d4-a716-446655440000"